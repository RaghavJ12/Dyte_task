{"version":3,"sources":["Code.js","trees.js","App.js","reportWebVitals.js","index.js"],"names":["CodeEditor","props","useState","content","setContent","btn1","setbtn1","console","log","language","useEffect","Prism","highlightAll","class","className","value","onChange","evt","target","onKeyDown","selStartPos","currentTarget","selectionStart","key","substring","length","selectionEnd","preventDefault","style","backgroundColor","color","onClick","useStyles","makeStyles","root","height","flexGrow","paddingTop","Trees","theme","useTheme","classes","List","TreeView","defaultCollapseIcon","defaultExpandIcon","TreeItem","nodeId","label","ListItem","button","component","ListItemText","primary","href","App","editorLanguage","setEditorLanguage","mode","setMode","setMt","setMab","setBool","type","id","name","checked","htmlFor","Code","mod","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.392c977c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Prism from \"prismjs\";\r\n\r\nconst CodeEditor = props => {\r\n  const [content, setContent] = useState(props.content);\r\n  const [mo, setMo] = useState(\"\");\r\n\r\n  const handleKeyDown = evt => {\r\n    let value = content,\r\n      selStartPos = evt.currentTarget.selectionStart;\r\n\r\n    // console.log(evt.currentTarget);\r\n\r\n    if (evt.key === \"Tab\") {\r\n      value =\r\n        value.substring(0, selStartPos) +\r\n        \"    \" +\r\n        value.substring(selStartPos, value.length);\r\n      evt.currentTarget.selectionStart = selStartPos + 3;\r\n      evt.currentTarget.selectionEnd = selStartPos + 4;\r\n      evt.preventDefault();\r\n\r\n      setContent(value);\r\n    }\r\n  };\r\n  \r\n  const [btn1, setbtn1] = useState(\"\");\r\n\r\n  function compile() {\r\n    setbtn1(content);\r\n  }\r\n\r\n  const [mab, setMab] = useState(\"white\");\r\n  \r\n  console.log(props.language);\r\n  useEffect(() => {\r\n    Prism.highlightAll();\r\n    // if(props.mode==\"night\")\r\n    // {\r\n    //   setMab('#323232');\r\n    // }\r\n    // else{\r\n    //   setMab('white');\r\n    // }\r\n  }, [props.language, btn1]);\r\n\r\n\r\n  return (\r\n    <>\r\n      <div class=\"columns\">\r\n        <div class=\"column is-6\">\r\n          <div className=\"code-edit-container\">\r\n            <div class=\"in\">\r\n              <textarea\r\n                className=\"code-input box\"\r\n                value={content}\r\n                onChange={evt => setContent(evt.target.value)}\r\n                onKeyDown={handleKeyDown}\r\n                style={{backgroundColor: '#323232', color:'white'}}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"columns\">\r\n            <div class=\"column is-3 is-offset-9\">\r\n              <div class=\"button is-success\" onClick={compile}>Live View &#8594;</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"column is-6\">\r\n          <div className=\"code-edit-container\">\r\n            <div class=\"out\">\r\n              <pre className=\"code-output\">\r\n                Output:\r\n                <code className={`language-${props.language} my-6 mx-4`}>{btn1}</code>\r\n              </pre>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CodeEditor;","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { TreeView } from '@material-ui/lab';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport \"./index.css\";\r\n\r\nconst useStyles = makeStyles(({\r\n\troot: {\r\n        height: 240,\r\n\t\tflexGrow: 1,\r\n\t\tpaddingTop: 15,\r\n\t},\r\n}));\r\n\r\nexport default function Trees() {\r\n\tconst theme = useTheme();\r\n\tconst classes = useStyles(theme);\r\n    \r\n    // const [fn, setfn] = useState(\"index.html\");\r\n\r\n    // function name(n){\r\n    //     setfn(n);\r\n    // }\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\r\n                {/* <FileName name={fn} /> */}\r\n\t\t\t\t<List class='tree'>\r\n\t\t\t\t\t<div>\r\n\r\n\t\t\t\t\t\t<TreeView class=\"px-3\"\r\n                        defaultCollapseIcon={<ExpandMoreIcon />}\r\n                        defaultExpandIcon={<ChevronRightIcon />}>\r\n\t\t\t\t\t\t\t<TreeItem nodeId=\"1\" label={\r\n\t\t\t\t\t\t\t\t<ListItem button component=\"a\">\r\n\t\t\t\t\t\t\t\t\t<ListItemText primary=\"Files\" />\r\n\t\t\t\t\t\t\t\t</ListItem>}>\r\n\t\t\t\t\t\t\t\t<TreeItem nodeId=\"1a\" label={\r\n\t\t\t\t\t\t\t\t\t<ListItem button component=\"a\" href=\"#\">\r\n\t\t\t\t\t\t\t\t\t\t<ListItemText primary=\"index.html\" />\r\n\t\t\t\t\t\t\t\t\t</ListItem>}>\r\n\t\t\t\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t\t\t\t<TreeItem nodeId=\"1b\" label={\r\n\t\t\t\t\t\t\t\t\t<ListItem button component=\"a\" href=\"#\">\r\n\t\t\t\t\t\t\t\t\t\t<ListItemText primary=\"index.js\" />\r\n\t\t\t\t\t\t\t\t\t</ListItem>}>\r\n\t\t\t\t\t\t\t\t</TreeItem>\r\n                                <TreeItem nodeId=\"1c\" label={\r\n\t\t\t\t\t\t\t\t\t<ListItem button component=\"a\" href=\"#\">\r\n\t\t\t\t\t\t\t\t\t\t<ListItemText primary=\"index.css\" />\r\n\t\t\t\t\t\t\t\t\t</ListItem>}>\r\n\t\t\t\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t\t\t</TreeItem> \r\n\t\t\t\t\t\t</TreeView>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</List>\r\n\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { useState ,useEffect } from \"react\";\nimport 'bulma/css/bulma.css'\n\nimport \"./index.css\";\nimport \"./daynight.css\";\n\nimport CodeEditor from \"./Code\";\nimport TreeComp from \"./trees\";\n\nexport default function App() {\n  const [editorLanguage, setEditorLanguage] = useState(\"markup\");\n\n  const [mode, setMode] = useState(\"day\");\n  const [mt, setMt] = useState(\"black\");\n  const [mab, setMab] = useState(\"white\");\n  const [bool, setBool] = useState(0);\n  function toggle() {\n    setMode(mode === \"day\" ? \"night\" : \"day\");\n  }\n\n  useEffect(()=>{\n    if(mode===\"night\")\n    {\n      setMt(\"white\");\n      setMab(\"black\");\n      setBool(1);\n    }\n    else if(mode===\"day\")\n    {\n      setMt(\"black\");\n      setMab(\"white\");\n      setBool(0);\n    }\n  })\n\n  return (\n    <div className=\"App container px-2\" style={{ color: \"white\", backgroundColor: \"rgb(107, 107, 146)\"}}>\n      <br />\n      <p class=\"is-size-2\">Dyte Code Editor</p>\n\n      <div class=\"columns is-size-5 my-6\">\n        <div class=\"column is-3\">\n          <fieldset>\n            <legend>Choose language:</legend>\n            <input\n              type=\"radio\"\n              id=\"html\"\n              name=\"language\"\n              value=\"markup\"\n              checked={editorLanguage === \"markup\"}\n              onChange={() => setEditorLanguage(\"markup\")}\n            />\n            <label htmlFor=\"xml\" class=\"mx-3\">HTML</label>\n            <input\n              type=\"radio\"\n              id=\"css\"\n              name=\"language\"\n              value=\"css\"\n              checked={editorLanguage === \"css\"}\n              onChange={() => setEditorLanguage(\"css\")}\n            />\n            <label htmlFor=\"css\" class=\"mx-3\">CSS</label>\n            <input\n              type=\"radio\"\n              id=\"javascript\"\n              name=\"language\"\n              value=\"javascript\"\n              checked={editorLanguage === \"javascript\"}\n              onChange={() => setEditorLanguage(\"javascript\")}\n            />\n            <label htmlFor=\"javascript\" class=\"mx-3\">JavaScript</label>\n          </fieldset>\n        </div>\n\n        <div class=\"column is-3 is-offset-6\">\n          <br/>\n          <label class=\"mx-3\">Day Mode</label>\n          <label class=\"switch\">\n            <input type=\"checkbox\" onClick={toggle}/>\n            <span class=\"slider round\"></span>\n          </label>\n          <label class=\"mx-3\">Night Mode</label>\n        </div>\n      </div>\n      <div class=\"columns\">\n        <div class=\"column is-2\">\n          <TreeComp />\n        </div>\n        <div class=\"column is-10\">\n          <CodeEditor language={editorLanguage} mod={mode}/>\n        </div>\n      </div>\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}